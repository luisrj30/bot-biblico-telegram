import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv

# Carrega vari√°veis do arquivo .env (localmente)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    raise ValueError("A vari√°vel de ambiente BOT_TOKEN n√£o foi definida!")

# Configura√ß√£o de log
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# Base de temas b√≠blicos (exemplo)
BASE_TEMAS = {
    "amor": {
        "versiculo": "1 Cor√≠ntios 13:4-7",
        "texto": "O amor √© paciente e bondoso. O amor n√£o √© ciumento, n√£o se gaba, n√£o √© orgulhoso...",
        "explicacao": "Mostra como o amor verdadeiro age com bondade e paci√™ncia.",
        "aplicacao": "Aplique sendo paciente com os outros, mesmo em conflitos.",
        "materia": "https://www.jw.org/pt/biblioteca/revistas/a-despertai-n1-2021-mar-abr/como-desenvolver-o-amor-verdadeiro/",
        "fonte": "jw.org",
    },
    "esperan√ßa": {
        "versiculo": "Apocalipse 21:4",
        "texto": "Ele enxugar√° dos seus olhos toda l√°grima...",
        "explicacao": "Deus promete um futuro sem dor nem morte.",
        "aplicacao": "Mesmo em dificuldades, mantenha a esperan√ßa nas promessas de Jeov√°.",
        "materia": "https://www.jw.org/pt/biblioteca/revistas/wp20150301/a-esperanca-que-a-biblia-oferece/",
        "fonte": "jw.org",
    },
}

# Comando /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ol√°! üëã Eu sou seu amigo b√≠blico.\n"
        "Me envie qualquer pergunta sobre a B√≠blia e eu vou tentar te ajudar com base nas publica√ß√µes das Testemunhas de Jeov√°."
    )

# Responder perguntas
async def responder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pergunta = update.message.text.lower()
    resposta = ""

    for chave, dados in BASE_TEMAS.items():
        if chave in pergunta:
            resposta = (
                f"üìñ *Vers√≠culo:* {dados['versiculo']}\n"
                f"{dados['texto']}\n\n"
                f"‚ú® *Explica√ß√£o:* {dados['explicacao']}\n"
                f"üß≠ *Aplica√ß√£o:* {dados['aplicacao']}\n\n"
                f"üìò *Mat√©ria recomendada:* {dados['materia']}\n"
                f"üìö *Fonte:* {dados['fonte']}\n\n"
                "üôè Voc√™ pode encontrar mais artigos como esse em: https://www.jw.org/pt"
            )
            break

    if not resposta:
        resposta = (
            "Muito obrigado pela sua pergunta! üôè\n"
            "Ainda n√£o encontrei uma resposta autom√°tica para esse tema.\n"
            "Mas voc√™ pode buscar diretamente em:\n"
            "üîé https://www.jw.org/pt ou https://wol.jw.org/pt/wol/h/r5/lp-t\n\n"
            "üôè Voc√™ pode encontrar mais artigos como esse em: https://www.jw.org/pt"
        )

    if resposta.strip():
        await update.message.reply_text(resposta, parse_mode="Markdown")
    else:
        await update.message.reply_text("Desculpe, n√£o encontrei resposta para isso.")

# Inicializa√ß√£o principal
def main():
    PORT = int(os.environ.get("PORT", 8443))
    HOSTNAME = os.environ.get("RENDER_EXTERNAL_HOSTNAME")  # adicione essa vari√°vel no Render

    if not HOSTNAME:
        raise ValueError("A vari√°vel de ambiente RENDER_EXTERNAL_HOSTNAME n√£o foi definida!")

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, responder))

    # Inicia via webhook (recomendado no Render)
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=f"https://{HOSTNAME}/{BOT_TOKEN}",
    )

if __name__ == "__main__":
    main()

